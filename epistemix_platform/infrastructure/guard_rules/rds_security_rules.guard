# RDS Security Rules
# CloudFormation Guard policy rules for RDS database security validation
#
# These rules enforce security best practices for RDS instances in CloudFormation templates.
# Documentation: https://docs.aws.amazon.com/cfn-guard/latest/ug/writing-rules.html
# AWS RDS Security Best Practices: https://docs.aws.amazon.com/prescriptive-guidance/latest/encryption-best-practices/rds.html
# Security Hub RDS Exposure Controls: https://docs.aws.amazon.com/securityhub/latest/userguide/exposure-rds.html

# ============================================================================
# DATA PROTECTION AND ENCRYPTION
# ============================================================================

# Rule: RDS instances must have storage encryption enabled
rule rds_storage_encryption_enabled {
    let rds_instances = Resources.*[ Type == 'AWS::RDS::DBInstance' ]

    when %rds_instances !empty {
        %rds_instances.Properties.StorageEncrypted exists

        %rds_instances.Properties.StorageEncrypted == true
    }
}

# ============================================================================
# NETWORK SECURITY AND ACCESS CONTROL
# ============================================================================

# Rule: RDS instances should not be publicly accessible
rule rds_not_publicly_accessible {
    let rds_instances = Resources.*[ Type == 'AWS::RDS::DBInstance' ]

    when %rds_instances !empty {
        %rds_instances.Properties.PubliclyAccessible exists

        # Allow either hardcoded false or parameter reference
        # Note: Guard cannot evaluate CloudFormation intrinsic functions,
        # so we check for presence rather than specific value when using Ref
        when %rds_instances.Properties.PubliclyAccessible == true {
            # Fail if explicitly set to true
            %rds_instances.Properties.PubliclyAccessible == false
        }
    }
}

# Rule: RDS instances must be in a DB subnet group
rule rds_must_have_subnet_group {
    let rds_instances = Resources.*[ Type == 'AWS::RDS::DBInstance' ]

    when %rds_instances !empty {
        %rds_instances.Properties.DBSubnetGroupName exists
    }
}

# Rule: RDS instances must have VPC security groups configured
rule rds_must_have_vpc_security_groups {
    let rds_instances = Resources.*[ Type == 'AWS::RDS::DBInstance' ]

    when %rds_instances !empty {
        %rds_instances.Properties.VPCSecurityGroups exists

        # At least one security group must be specified
        %rds_instances.Properties.VPCSecurityGroups[*] !empty
    }
}

# ============================================================================
# BACKUP AND DISASTER RECOVERY
# ============================================================================

# Rule: RDS instances must have backup retention configured
rule rds_backup_retention_configured {
    let rds_instances = Resources.*[ Type == 'AWS::RDS::DBInstance' ]

    when %rds_instances !empty {
        %rds_instances.Properties.BackupRetentionPeriod exists

        # BackupRetentionPeriod must be at least 1 day (0 disables backups)
        %rds_instances.Properties.BackupRetentionPeriod >= 1
    }
}

# Rule: RDS instances should have preferred maintenance and backup windows
rule rds_should_have_maintenance_windows {
    let rds_instances = Resources.*[ Type == 'AWS::RDS::DBInstance' ]

    when %rds_instances !empty {
        %rds_instances.Properties.PreferredBackupWindow exists

        %rds_instances.Properties.PreferredMaintenanceWindow exists
    }
}

# Rule: RDS instances should have deletion policy configured
rule rds_deletion_policy_configured {
    let rds_instances = Resources.*[ Type == 'AWS::RDS::DBInstance' ]

    when %rds_instances !empty {
        %rds_instances.DeletionPolicy exists

        when %rds_instances.DeletionPolicy exists {
            %rds_instances.DeletionPolicy in ['Snapshot', 'Retain', 'Delete']
        }
    }
}

# ============================================================================
# DATABASE CONFIGURATION AND STANDARDS
# ============================================================================

# Rule: RDS instances must specify database engine
rule rds_must_specify_engine {
    let rds_instances = Resources.*[ Type == 'AWS::RDS::DBInstance' ]

    when %rds_instances !empty {
        %rds_instances.Properties.Engine exists
    }
}

# Rule: RDS DB parameters should require no password in connection strings
rule rds_password_parameter_noecho {
    let db_password_params = Parameters.*[ NoEcho exists ]

    # Ensure password parameters have NoEcho enabled
    when %db_password_params !empty {
        %db_password_params.NoEcho == true
    }
}

# ============================================================================
# GOVERNANCE AND COMPLIANCE
# ============================================================================

# Rule: RDS instances must have tags
rule rds_instances_must_be_tagged {
    let rds_instances = Resources.*[ Type == 'AWS::RDS::DBInstance' ]

    when %rds_instances !empty {
        %rds_instances.Properties.Tags exists

        when %rds_instances.Properties.Tags exists {
            some %rds_instances.Properties.Tags[*].Key == 'Environment'
        }
    }
}

# Rule: RDS DB subnet groups must have tags
rule rds_subnet_groups_must_be_tagged {
    let subnet_groups = Resources.*[ Type == 'AWS::RDS::DBSubnetGroup' ]

    when %subnet_groups !empty {
        %subnet_groups.Properties.Tags exists
    }
}

# Rule: RDS DB subnet groups must reference subnets
rule rds_subnet_groups_must_have_subnets {
    let subnet_groups = Resources.*[ Type == 'AWS::RDS::DBSubnetGroup' ]

    when %subnet_groups !empty {
        %subnet_groups.Properties.SubnetIds exists

        when %subnet_groups.Properties.SubnetIds exists {
            %subnet_groups.Properties.SubnetIds !empty
        }
    }
}

# ============================================================================
# NETWORK SECURITY GROUPS
# ============================================================================

# Rule: Security groups must be in VPC
rule rds_security_groups_must_be_in_vpc {
    let security_groups = Resources.*[ Type == 'AWS::EC2::SecurityGroup' ]

    when %security_groups !empty {
        %security_groups.Properties.VpcId exists
    }
}

# Rule: Security groups should have descriptive group descriptions
rule rds_security_groups_should_have_description {
    let security_groups = Resources.*[ Type == 'AWS::EC2::SecurityGroup' ]

    when %security_groups !empty {
        %security_groups.Properties.GroupDescription exists
    }
}

# Rule: Security groups should have tags
rule rds_security_groups_must_be_tagged {
    let security_groups = Resources.*[ Type == 'AWS::EC2::SecurityGroup' ]

    when %security_groups !empty {
        %security_groups.Properties.Tags exists
    }
}

# Rule: Security group ingress rules should have descriptions
rule rds_security_group_ingress_should_have_description {
    let sg_ingress = Resources.*[ Type == 'AWS::EC2::SecurityGroupIngress' ]

    when %sg_ingress !empty {
        %sg_ingress.Properties.Description exists
    }
}
