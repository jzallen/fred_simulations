# Lambda Security Rules
# CloudFormation Guard policy rules for Lambda function security validation
#
# These rules enforce security best practices for Lambda functions in CloudFormation templates.
# Documentation: https://docs.aws.amazon.com/cfn-guard/latest/ug/writing-rules.html
# AWS Lambda Security Best Practices: https://docs.aws.amazon.com/lambda/latest/dg/lambda-security.html

# ============================================================================
# IAM AND EXECUTION ROLES
# ============================================================================

# Rule: Lambda functions must have an execution role
rule lambda_must_have_execution_role {
    let lambda_functions = Resources.*[ Type == 'AWS::Lambda::Function' ]

    when %lambda_functions !empty {
        %lambda_functions.Properties.Role exists
    }
}

# ============================================================================
# NETWORK SECURITY
# ============================================================================

# Rule: Lambda functions should be deployed in VPC for private resource access
rule lambda_should_have_vpc_config {
    let lambda_functions = Resources.*[ Type == 'AWS::Lambda::Function' ]

    when %lambda_functions !empty {
        %lambda_functions.Properties.VpcConfig exists

        when %lambda_functions.Properties.VpcConfig exists {
            %lambda_functions.Properties.VpcConfig.SecurityGroupIds exists

            %lambda_functions.Properties.VpcConfig.SubnetIds exists
        }
    }
}

# Rule: Lambda functions must have timeout configured
rule lambda_must_have_timeout {
    let lambda_functions = Resources.*[ Type == 'AWS::Lambda::Function' ]

    when %lambda_functions !empty {
        %lambda_functions.Properties.Timeout exists
    }
}

# Rule: Lambda functions should have memory size configured
rule lambda_should_have_memory_configured {
    let lambda_functions = Resources.*[ Type == 'AWS::Lambda::Function' ]

    when %lambda_functions !empty {
        %lambda_functions.Properties.MemorySize exists
    }
}

# Rule: Lambda functions should have CloudWatch log groups
rule lambda_should_have_log_group {
    let lambda_functions = Resources.*[ Type == 'AWS::Lambda::Function' ]
    let log_groups = Resources.*[ Type == 'AWS::Logs::LogGroup' ]

    when %lambda_functions !empty {
        %log_groups !empty
    }
}

# Rule: Lambda log groups should have retention configured
rule lambda_log_groups_must_have_retention {
    let log_groups = Resources.*[ Type == 'AWS::Logs::LogGroup' ]

    when %log_groups !empty {
        %log_groups.Properties.RetentionInDays exists
    }
}

# Rule: Lambda execution roles must have assume role policy for Lambda service
rule lambda_execution_roles_must_trust_lambda_service {
    let lambda_roles = Resources.*[
        Type == 'AWS::IAM::Role'
    ]

    when %lambda_roles !empty {
        # Check if any roles are used by Lambda functions
        %lambda_roles.Properties.AssumeRolePolicyDocument exists
    }
}

# Rule: Lambda functions should have tags for governance
rule lambda_functions_must_be_tagged {
    let lambda_functions = Resources.*[ Type == 'AWS::Lambda::Function' ]

    when %lambda_functions !empty {
        %lambda_functions.Properties.Tags exists
    }
}

# Rule: Lambda functions using container images should specify architecture
rule lambda_container_images_should_specify_architecture {
    let lambda_functions = Resources.*[
        Type == 'AWS::Lambda::Function'
        Properties.PackageType == 'Image'
    ]

    when %lambda_functions !empty {
        %lambda_functions.Properties.Architectures exists
    }
}

# Rule: Lambda security groups should have explicit egress rules
# Note: Security groups for Lambda should define explicit egress
rule lambda_security_groups_should_have_egress {
    let security_groups = Resources.*[ Type == 'AWS::EC2::SecurityGroup' ]

    when %security_groups !empty {
        %security_groups.Properties.SecurityGroupEgress exists
    }
}

# Note: Lambda environment variables with secrets
# Best practice: Use AWS Secrets Manager or Systems Manager Parameter Store
# with dynamic references instead of passing secrets as environment variables.
# CloudFormation Guard cannot fully validate secret handling patterns.
# Review Environment.Variables for PASSWORD, SECRET, API_KEY patterns manually.
