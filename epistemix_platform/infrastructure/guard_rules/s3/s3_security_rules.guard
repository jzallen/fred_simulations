# S3 Security Rules
# CloudFormation Guard policy rules for S3 bucket security validation
#
# These rules enforce security best practices for S3 buckets in CloudFormation templates.
# Documentation: https://docs.aws.amazon.com/cfn-guard/latest/ug/writing-rules.html

# Rule: S3 buckets must have encryption enabled
rule s3_encryption_enabled {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.Properties.BucketEncryption exists <<
            Violation: S3 bucket must have encryption enabled
            Fix: Add BucketEncryption configuration with AES256 or aws:kms
            Example:
              BucketEncryption:
                ServerSideEncryptionConfiguration:
                  - ServerSideEncryptionByDefault:
                      SSEAlgorithm: AES256
        >>

        %s3_buckets.Properties.BucketEncryption.ServerSideEncryptionConfiguration[*] {
            ServerSideEncryptionByDefault.SSEAlgorithm in ['AES256', 'aws:kms'] <<
                Violation: Encryption algorithm must be AES256 or aws:kms
                Fix: Set SSEAlgorithm to 'AES256' or 'aws:kms'
            >>
        }
    }
}

# Rule: S3 buckets must block all public access
rule s3_public_access_blocked {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.Properties.PublicAccessBlockConfiguration exists <<
            Violation: S3 bucket must have PublicAccessBlockConfiguration
            Fix: Add PublicAccessBlockConfiguration with all 4 settings enabled
        >>

        %s3_buckets.Properties.PublicAccessBlockConfiguration {
            BlockPublicAcls == true <<
                Violation: BlockPublicAcls must be true
                Fix: Set BlockPublicAcls: true
            >>

            BlockPublicPolicy == true <<
                Violation: BlockPublicPolicy must be true
                Fix: Set BlockPublicPolicy: true
            >>

            IgnorePublicAcls == true <<
                Violation: IgnorePublicAcls must be true
                Fix: Set IgnorePublicAcls: true
            >>

            RestrictPublicBuckets == true <<
                Violation: RestrictPublicBuckets must be true
                Fix: Set RestrictPublicBuckets: true
            >>
        }
    }
}

# Rule: S3 buckets must have versioning enabled
rule s3_versioning_enabled {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.Properties.VersioningConfiguration exists <<
            Violation: S3 bucket must have versioning enabled
            Fix: Add VersioningConfiguration with Status: Enabled
            Example:
              VersioningConfiguration:
                Status: Enabled
        >>

        %s3_buckets.Properties.VersioningConfiguration.Status == 'Enabled' <<
            Violation: Versioning status must be 'Enabled'
            Fix: Set Status: Enabled in VersioningConfiguration
        >>
    }
}

# Rule: S3 bucket policies must enforce HTTPS-only connections
rule s3_https_only {
    let bucket_policies = Resources.*[ Type == 'AWS::S3::BucketPolicy' ]

    when %bucket_policies !empty {
        %bucket_policies.Properties.PolicyDocument.Statement[*] {
            # At least one Deny statement should enforce SecureTransport
            when Effect == 'Deny' {
                Condition.Bool.'aws:SecureTransport' == 'false' <<
                    Violation: Bucket policy should deny requests without SecureTransport
                    Fix: Add Deny statement with Condition.Bool."aws:SecureTransport": "false"
                >>
            }
        }
    }
}

# Rule: S3 buckets should have lifecycle policies configured
rule s3_lifecycle_configured {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.Properties.LifecycleConfiguration exists <<
            Violation: S3 bucket should have lifecycle policies configured
            Fix: Add LifecycleConfiguration with appropriate rules
            Rationale: Lifecycle policies help manage storage costs and data retention
        >>
    }
}
