# ECR Security Rules
# CloudFormation Guard policy rules for ECR repository security validation
#
# These rules enforce security best practices for ECR repositories in CloudFormation templates.
# Documentation: https://docs.aws.amazon.com/cfn-guard/latest/ug/writing-rules.html
# AWS ECR Security Best Practices: https://docs.aws.amazon.com/prescriptive-guidance/latest/encryption-best-practices/ecr.html
# Security Hub ECR Controls: https://docs.aws.amazon.com/securityhub/latest/userguide/ecr-controls.html

# ============================================================================
# IMAGE SECURITY AND SCANNING
# ============================================================================

# Rule: ECR repositories must have image scanning enabled
rule ecr_image_scanning_enabled {
    let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]

    when %ecr_repos !empty {
        %ecr_repos.Properties.ImageScanningConfiguration exists

        %ecr_repos.Properties.ImageScanningConfiguration.ScanOnPush exists
    }
}

# ============================================================================
# DATA PROTECTION AND ENCRYPTION
# ============================================================================

# Rule: ECR repositories must have encryption enabled
rule ecr_encryption_enabled {
    let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]

    when %ecr_repos !empty {
        %ecr_repos.Properties.EncryptionConfiguration exists

        %ecr_repos.Properties.EncryptionConfiguration.EncryptionType in ['AES256', 'KMS']
    }
}

# ============================================================================
# LIFECYCLE MANAGEMENT AND COST OPTIMIZATION
# ============================================================================

# Rule: ECR repositories must have lifecycle policies configured
rule ecr_lifecycle_policy_configured {
    let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]

    when %ecr_repos !empty {
        %ecr_repos.Properties.LifecyclePolicy exists

        when %ecr_repos.Properties.LifecyclePolicy exists {
            %ecr_repos.Properties.LifecyclePolicy.LifecyclePolicyText exists
        }
    }
}

# ============================================================================
# GOVERNANCE AND COMPLIANCE
# ============================================================================

# Rule: ECR repositories must have tags for governance
rule ecr_repositories_must_be_tagged {
    let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]

    when %ecr_repos !empty {
        %ecr_repos.Properties.Tags exists

        when %ecr_repos.Properties.Tags exists {
            some %ecr_repos.Properties.Tags[*].Key == 'Environment'
        }
    }
}

# Rule: ECR repositories should have deletion policy configured
rule ecr_deletion_policy_configured {
    let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]

    when %ecr_repos !empty {
        %ecr_repos.DeletionPolicy exists
    }
}

# Rule: ECR repositories should have update replace policy configured
rule ecr_update_replace_policy_configured {
    let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]

    when %ecr_repos !empty {
        %ecr_repos.UpdateReplacePolicy exists
    }
}

# ============================================================================
# IAM AND ACCESS CONTROL
# ============================================================================

# Rule: IAM roles must have assume role policy documents
rule ecr_iam_roles_must_have_trust_policy {
    let iam_roles = Resources.*[ Type == 'AWS::IAM::Role' ]

    when %iam_roles !empty {
        %iam_roles.Properties.AssumeRolePolicyDocument exists

        when %iam_roles.Properties.AssumeRolePolicyDocument exists {
            %iam_roles.Properties.AssumeRolePolicyDocument.Version exists

            %iam_roles.Properties.AssumeRolePolicyDocument.Statement exists

            %iam_roles.Properties.AssumeRolePolicyDocument.Statement[*] {
                Effect == 'Allow'

                Action exists

                Principal exists
            }
        }
    }
}

# Rule: IAM roles should have tags for governance
rule ecr_iam_roles_must_be_tagged {
    let iam_roles = Resources.*[ Type == 'AWS::IAM::Role' ]

    when %iam_roles !empty {
        %iam_roles.Properties.Tags exists
    }
}

# Rule: IAM instance profiles must reference roles
rule ecr_instance_profiles_must_have_roles {
    let instance_profiles = Resources.*[ Type == 'AWS::IAM::InstanceProfile' ]

    when %instance_profiles !empty {
        %instance_profiles.Properties.Roles exists

        when %instance_profiles.Properties.Roles exists {
            %instance_profiles.Properties.Roles !empty
        }
    }
}

# ============================================================================
# LOGGING AND MONITORING
# ============================================================================

# Rule: CloudWatch log groups should have retention configured
rule ecr_cloudwatch_log_retention_configured {
    let log_groups = Resources.*[ Type == 'AWS::Logs::LogGroup' ]

    when %log_groups !empty {
        %log_groups.Properties.RetentionInDays exists

        when %log_groups.Properties.RetentionInDays exists {
            %log_groups.Properties.RetentionInDays >= 7
        }
    }
}

# Rule: CloudWatch log groups should have tags
rule ecr_cloudwatch_log_groups_must_be_tagged {
    let log_groups = Resources.*[ Type == 'AWS::Logs::LogGroup' ]

    when %log_groups !empty {
        %log_groups.Properties.Tags exists
    }
}
