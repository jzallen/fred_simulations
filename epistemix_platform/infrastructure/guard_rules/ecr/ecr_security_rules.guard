# ECR Security Rules
# CloudFormation Guard policy rules for ECR repository security validation
#
# These rules enforce security best practices for ECR repositories in CloudFormation templates.
# Documentation: https://docs.aws.amazon.com/cfn-guard/latest/ug/writing-rules.html

# Rule: ECR repositories must have image scanning enabled
rule ecr_image_scanning_enabled {
    let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]

    when %ecr_repos !empty {
        %ecr_repos.Properties.ImageScanningConfiguration exists <<
            Violation: ECR repository must have image scanning configured
            Fix: Add ImageScanningConfiguration to repository properties
            Example:
              ImageScanningConfiguration:
                ScanOnPush: true
        >>

        %ecr_repos.Properties.ImageScanningConfiguration.ScanOnPush exists <<
            Violation: ECR repository must enable scan on push
            Fix: Set ScanOnPush to true in ImageScanningConfiguration
            Rationale: Automatically scans images for vulnerabilities when pushed
        >>
    }
}

# Rule: ECR repositories must have encryption enabled
rule ecr_encryption_enabled {
    let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]

    when %ecr_repos !empty {
        %ecr_repos.Properties.EncryptionConfiguration exists <<
            Violation: ECR repository must have encryption configured
            Fix: Add EncryptionConfiguration with AES256 or KMS
            Example:
              EncryptionConfiguration:
                EncryptionType: AES256
        >>

        %ecr_repos.Properties.EncryptionConfiguration.EncryptionType in ['AES256', 'KMS'] <<
            Violation: Encryption type must be AES256 or KMS
            Fix: Set EncryptionType to 'AES256' or 'KMS'
        >>
    }
}

# Rule: ECR repositories should have lifecycle policies configured
rule ecr_lifecycle_policy_configured {
    let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]

    when %ecr_repos !empty {
        %ecr_repos.Properties.LifecyclePolicy exists <<
            Violation: ECR repository should have lifecycle policy configured
            Fix: Add LifecyclePolicy to manage image retention and storage costs
            Rationale: Lifecycle policies help clean up old/untagged images automatically
            Example:
              LifecyclePolicy:
                LifecyclePolicyText: |
                  {
                    "rules": [{
                      "rulePriority": 1,
                      "description": "Expire untagged images",
                      "selection": {
                        "tagStatus": "untagged",
                        "countType": "sinceImagePushed",
                        "countUnit": "days",
                        "countNumber": 30
                      },
                      "action": {"type": "expire"}
                    }]
                  }
        >>
    }
}

# Rule: ECR repositories should have immutable tags (for production)
# Note: This is a recommendation, not enforced
# Uncomment and modify the condition below to enforce for production environments
# rule ecr_immutable_tags_for_production {
#     let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]
#     let production_repos = %ecr_repos[ some Properties.Tags[*] { Key == 'Environment' Value == 'production' } ]
#
#     when %production_repos !empty {
#         %production_repos.Properties.ImageTagMutability == 'IMMUTABLE' <<
#             Violation: Production ECR repositories should have immutable tags
#             Fix: Set ImageTagMutability to 'IMMUTABLE' for production environments
#             Rationale: Prevents accidental overwrite of production images
#         >>
#     }
# }

# Rule: ECR repositories must have tags for governance
rule ecr_repositories_must_be_tagged {
    let ecr_repos = Resources.*[ Type == 'AWS::ECR::Repository' ]

    when %ecr_repos !empty {
        %ecr_repos.Properties.Tags exists <<
            Violation: ECR repository must have tags for governance
            Fix: Add Tags with at least Environment key
            Rationale: Tags enable cost tracking and resource management
        >>
    }
}
