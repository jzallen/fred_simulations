#!/usr/bin/env python3
"""
Utility to prepare FRED 10 configuration files from epx run config JSON.

This script reads a run_config.json file (generated by epx) and injects
the necessary parameters (start_date, end_date, locations) into a FRED
.fred file for execution with FRED 10.

FRED 10 requires these parameters to be in the .fred file itself, unlike
FRED 11+ which accepts them as command-line arguments.

Usage:
    python prepare_fred_config.py <run_config.json> <input.fred> <output.fred>

Example:
    python prepare_fred_config.py run_4_config.json main.fred prepared_main.fred
"""

import argparse
import json
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional


def convert_date_to_fred10_format(date_str: str) -> str:
    """Convert ISO date (YYYY-MM-DD) to FRED 10 format (YYYY-Mon-DD).

    Parameters
    ----------
    date_str : str
        Date in ISO format (YYYY-MM-DD)

    Returns
    -------
    str
        Date in FRED 10 format (YYYY-Mon-DD)

    Examples
    --------
    >>> convert_date_to_fred10_format("2020-01-01")
    '2020-Jan-01'
    >>> convert_date_to_fred10_format("2020-03-31")
    '2020-Mar-31'
    """
    months = [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
    ]

    # Parse the ISO date
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")

    # Format as FRED 10 expects
    month_abbr = months[date_obj.month - 1]
    return f"{date_obj.year}-{month_abbr}-{date_obj.day:02d}"


def load_run_config(config_path: Path) -> dict:
    """Load and parse run configuration JSON.

    Parameters
    ----------
    config_path : Path
        Path to run_config.json file

    Returns
    -------
    dict
        Parsed run configuration
    """
    with open(config_path) as f:
        return json.load(f)


def extract_fred_params(run_config: dict) -> dict:
    """Extract FRED parameters from run config.

    Parameters
    ----------
    run_config : dict
        Run configuration dictionary

    Returns
    -------
    dict
        Dictionary containing:
        - start_date: str in FRED 10 format
        - end_date: str in FRED 10 format
        - locations: list[str]
        - seed: int (for -r flag)
    """
    params = run_config.get("params", {})

    # Extract and convert dates
    start_date = params.get("start_date")
    end_date = params.get("end_date")

    if start_date:
        start_date = convert_date_to_fred10_format(start_date)

    if end_date:
        end_date = convert_date_to_fred10_format(end_date)

    # Extract locations
    synth_pop = params.get("synth_pop", {})
    locations = synth_pop.get("locations", [])

    # Extract seed
    seed = params.get("seed")

    return {
        "start_date": start_date,
        "end_date": end_date,
        "locations": locations,
        "seed": seed,
    }


def inject_params_into_fred_file(
    input_fred_path: Path,
    output_fred_path: Path,
    params: dict
) -> None:
    """Inject FRED parameters into .fred file.

    This function reads a .fred file and injects start_date, end_date,
    and locations parameters at the beginning of the file.

    Parameters
    ----------
    input_fred_path : Path
        Path to input .fred file
    output_fred_path : Path
        Path to output .fred file
    params : dict
        Parameters to inject (start_date, end_date, locations)
    """
    # Read the original fred file
    with open(input_fred_path) as f:
        original_content = f.read()

    # Build the parameter header
    header_lines = [
        "##################################################",
        "# FRED 10 Configuration (Auto-generated from epx run config)",
        "##################################################",
        "",
    ]

    # Add simulation dates
    if params.get("start_date"):
        header_lines.append("##### SIMULATED TIMEFRAME")
        header_lines.append(f"start_date = {params['start_date']}")
        if params.get("end_date"):
            header_lines.append(f"end_date = {params['end_date']}")
        header_lines.append("")

    # Add locations
    if params.get("locations"):
        header_lines.append("##### SIMULATED LOCATION")
        for location in params["locations"]:
            header_lines.append(f"locations = {location}")
        header_lines.append("")

    header_lines.append("##################################################")
    header_lines.append("")

    # Combine header with original content
    header = "\n".join(header_lines)
    final_content = header + original_content

    # Write to output file
    with open(output_fred_path, "w") as f:
        f.write(final_content)


def main():
    """Main entry point for the script."""
    parser = argparse.ArgumentParser(
        description="Prepare FRED 10 configuration from epx run config JSON",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Prepare a FRED config from downloaded job files
  python prepare_fred_config.py \\
      /tmp/job_12_downloads/job_12/run_4_config.json \\
      /tmp/job_12_downloads/job_12/main.fred \\
      /tmp/prepared_main.fred

  # Use with extracted job input
  python prepare_fred_config.py \\
      run_config.json \\
      main.fred \\
      prepared.fred

The script will:
1. Extract start_date, end_date, and locations from the run config
2. Convert dates from ISO format (2020-01-01) to FRED 10 format (2020-Jan-01)
3. Inject these parameters at the beginning of the .fred file
4. Write the prepared .fred file ready for FRED 10 execution

You can then run FRED with:
  FRED -p prepared.fred -r <run_number> -d OUT
        """
    )

    parser.add_argument(
        "run_config",
        type=Path,
        help="Path to run_config.json file"
    )

    parser.add_argument(
        "input_fred",
        type=Path,
        help="Path to input .fred file (e.g., main.fred)"
    )

    parser.add_argument(
        "output_fred",
        type=Path,
        help="Path to output .fred file (prepared configuration)"
    )

    parser.add_argument(
        "--print-seed",
        action="store_true",
        help="Print the seed/run_number for use with -r flag"
    )

    parser.add_argument(
        "--verbose",
        "-v",
        action="store_true",
        help="Print detailed information about the conversion"
    )

    args = parser.parse_args()

    # Validate inputs
    if not args.run_config.exists():
        print(f"Error: Run config not found: {args.run_config}", file=sys.stderr)
        sys.exit(1)

    if not args.input_fred.exists():
        print(f"Error: Input FRED file not found: {args.input_fred}", file=sys.stderr)
        sys.exit(1)

    # Load and process configuration
    if args.verbose:
        print(f"Loading run configuration from: {args.run_config}")

    run_config = load_run_config(args.run_config)
    params = extract_fred_params(run_config)

    if args.verbose:
        print("\nExtracted parameters:")
        print(f"  Start Date: {params['start_date']}")
        print(f"  End Date: {params['end_date']}")
        print(f"  Locations: {', '.join(params['locations']) if params['locations'] else 'None'}")
        print(f"  Seed: {params['seed']}")

    # Inject parameters into FRED file
    if args.verbose:
        print(f"\nInjecting parameters into: {args.input_fred}")
        print(f"Writing prepared file to: {args.output_fred}")

    inject_params_into_fred_file(args.input_fred, args.output_fred, params)

    # Print success message and usage instructions
    print(f"âœ“ Successfully prepared FRED configuration: {args.output_fred}")

    if params.get("seed"):
        # FRED 10 uses 16-bit run numbers, so we need to scale the seed
        # Use the same logic as epx's rescale_seed_to_run_number
        max_run_number = 2 ** 16
        seed_64bit = params["seed"]
        # Simple modulo to fit in 16-bit range (1 to 65536)
        run_number = (seed_64bit % max_run_number) + 1

        if args.print_seed or args.verbose:
            print(f"\nTo run FRED 10 with this configuration:")
            print(f"  export FRED_HOME=/workspaces/fred_simulations/fred-framework")
            print(f"  FRED -p {args.output_fred} -r {run_number} -d OUT")
    else:
        print(f"\nTo run FRED 10 with this configuration:")
        print(f"  export FRED_HOME=/workspaces/fred_simulations/fred-framework")
        print(f"  FRED -p {args.output_fred} -r 1 -d OUT")


if __name__ == "__main__":
    main()
