# API Gateway Security Rules
# CloudFormation Guard policy rules for API Gateway security validation
#
# These rules enforce security best practices for API Gateway in CloudFormation templates.
# Documentation: https://docs.aws.amazon.com/cfn-guard/latest/ug/writing-rules.html
# AWS API Gateway Security Best Practices: https://docs.aws.amazon.com/apigateway/latest/developerguide/security-best-practices.html

# ============================================================================
# API GATEWAY CONFIGURATION
# ============================================================================

# Rule: API Gateway REST API must exist
rule api_gateway_rest_api_must_exist {
    let apis = Resources.*[ Type == 'AWS::ApiGateway::RestApi' ]

    %apis !empty
}

# Rule: API Gateway must have deployment
rule api_gateway_must_have_deployment {
    let apis = Resources.*[ Type == 'AWS::ApiGateway::RestApi' ]
    let deployments = Resources.*[ Type == 'AWS::ApiGateway::Deployment' ]

    when %apis !empty {
        %deployments !empty
    }
}

# ============================================================================
# STAGE CONFIGURATION AND SECURITY
# ============================================================================

# Rule: API Gateway stage must reference deployment
rule api_gateway_stage_must_reference_deployment {
    let stages = Resources.*[ Type == 'AWS::ApiGateway::Stage' ]

    when %stages !empty {
        %stages.Properties.DeploymentId exists
    }
}

# Rule: API Gateway stage must have method settings for throttling
rule api_gateway_stage_must_have_method_settings {
    let stages = Resources.*[ Type == 'AWS::ApiGateway::Stage' ]

    when %stages !empty {
        %stages.Properties.MethodSettings exists
    }
}

# Rule: API Gateway stage should have logging enabled
rule api_gateway_stage_should_have_logging {
    let stages = Resources.*[ Type == 'AWS::ApiGateway::Stage' ]

    when %stages !empty {
        when %stages.Properties.MethodSettings exists {
            some %stages.Properties.MethodSettings[*].LoggingLevel exists
        }
    }
}

# Rule: API Gateway stage should have CloudWatch metrics enabled
rule api_gateway_stage_should_have_metrics {
    let stages = Resources.*[ Type == 'AWS::ApiGateway::Stage' ]

    when %stages !empty {
        when %stages.Properties.MethodSettings exists {
            some %stages.Properties.MethodSettings[*].MetricsEnabled exists
        }
    }
}

# Rule: API Gateway stage should have tags
rule api_gateway_stage_should_have_tags {
    let stages = Resources.*[ Type == 'AWS::ApiGateway::Stage' ]

    when %stages !empty {
        %stages.Properties.Tags exists
    }
}

# ============================================================================
# AUTHORIZATION AND ACCESS CONTROL
# ============================================================================

# Rule: API Gateway methods should have authorization configured
rule api_gateway_methods_should_have_authorization {
    let methods = Resources.*[ Type == 'AWS::ApiGateway::Method' ]

    when %methods !empty {
        %methods.Properties.AuthorizationType exists
    }
}

# ============================================================================
# LOGGING AND MONITORING
# ============================================================================

# Rule: API Gateway accounts should have CloudWatch role configured
rule api_gateway_account_should_have_cloudwatch_role {
    let apis = Resources.*[ Type == 'AWS::ApiGateway::RestApi' ]
    let accounts = Resources.*[ Type == 'AWS::ApiGateway::Account' ]

    when %apis !empty {
        when %accounts !empty {
            %accounts.Properties.CloudWatchRoleArn exists
        }
    }
}

# ============================================================================
# GOVERNANCE AND COMPLIANCE
# ============================================================================

# Rule: API Gateway REST APIs should have names
rule api_gateway_rest_api_should_have_name {
    let apis = Resources.*[ Type == 'AWS::ApiGateway::RestApi' ]

    when %apis !empty {
        %apis.Properties.Name exists
    }
}

# Rule: API Gateway REST APIs should have descriptions
rule api_gateway_rest_api_should_have_description {
    let apis = Resources.*[ Type == 'AWS::ApiGateway::RestApi' ]

    when %apis !empty {
        %apis.Properties.Description exists
    }
}

# ============================================================================
# IAM ROLES
# ============================================================================

# Rule: IAM roles must have assume role policy documents
rule api_gateway_iam_roles_must_have_trust_policy {
    let iam_roles = Resources.*[ Type == 'AWS::IAM::Role' ]

    when %iam_roles !empty {
        %iam_roles.Properties.AssumeRolePolicyDocument exists

        when %iam_roles.Properties.AssumeRolePolicyDocument exists {
            %iam_roles.Properties.AssumeRolePolicyDocument.Version exists

            %iam_roles.Properties.AssumeRolePolicyDocument.Statement exists
        }
    }
}

# Rule: IAM roles should have tags
rule api_gateway_iam_roles_should_have_tags {
    let iam_roles = Resources.*[ Type == 'AWS::IAM::Role' ]

    when %iam_roles !empty {
        %iam_roles.Properties.Tags exists
    }
}
