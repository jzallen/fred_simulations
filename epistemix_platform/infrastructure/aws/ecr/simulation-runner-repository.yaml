AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECR repository for FRED simulation runner with lifecycle policies, security scanning, and IAM access controls'

Parameters:
  RepositoryName:
    Type: String
    Description: Name of the ECR repository
    Default: fred-simulation-runner
    MinLength: 2
    MaxLength: 256
    AllowedPattern: '^[a-z0-9]+(?:[._-][a-z0-9]+)*$'
    ConstraintDescription: Repository name must be lowercase letters, numbers, hyphens, underscores, and periods only

  Environment:
    Type: String
    Description: Environment name for tagging and configuration
    Default: dev
    AllowedValues:
      - dev
      - staging
      - production

  EnableVulnerabilityScanning:
    Type: String
    Description: Enable automatic vulnerability scanning on image push
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

  EnableCloudWatchLogs:
    Type: String
    Description: Enable CloudWatch logs for ECR repository
    Default: "true"
    AllowedValues:
      - "true"
      - "false"

  NotificationTopicArn:
    Type: String
    Description: SNS topic ARN for notifications (optional)
    Default: ""

Conditions:
  HasNotificationTopic: !Not [!Equals [!Ref NotificationTopicArn, ""]]
  EnableCloudWatchLogsCondition: !Equals [!Ref EnableCloudWatchLogs, "true"]
  IsProduction: !Equals [!Ref Environment, "production"]

Resources:
  # ECR Repository with KMS encryption and vulnerability scanning
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepositoryName
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: !Ref EnableVulnerabilityScanning
      EncryptionConfiguration:
        EncryptionType: KMS
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images tagged as 'latest' or 'main'",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["latest", "main"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 2,
                "description": "Keep last 20 images with semantic version tags",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["v"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 20
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 3,
                "description": "Keep last 5 images tagged with branch names or dev tags",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["dev-", "feature-", "bugfix-", "hotfix-"],
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 4,
                "description": "Delete untagged images after 1 day",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 5,
                "description": "Delete images older than 90 days unless they match retention rules",
                "selection": {
                  "tagStatus": "any",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 90
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: FREDSimulationRunner
        - Key: ManagedBy
          Value: CloudFormation

  # IAM Role for CI/CD Pipeline (Push/Pull access)
  ECRCICDRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${RepositoryName}-cicd-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'aws:RequestedRegion': !Ref 'AWS::Region'
      Policies:
        - PolicyName: ECRFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:ListTagsForResource
                  - ecr:DescribeImageScanFindings
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:BatchDeleteImage
                Resource: !GetAtt ECRRepository.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: ECRCICDAccess
        - Key: ManagedBy
          Value: CloudFormation

  # IAM Role for EKS pods using IRSA (IAM Roles for Service Accounts)
  ECREKSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${RepositoryName}-eks-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/oidc.eks.${AWS::Region}.amazonaws.com'
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'oidc.eks.${AWS::Region}.amazonaws.com:sub': 'system:serviceaccount:default:fred-simulation-runner'
                'oidc.eks.${AWS::Region}.amazonaws.com:aud': 'sts.amazonaws.com'
      Policies:
        - PolicyName: ECRReadOnlyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:ListTagsForResource
                  - ecr:DescribeImageScanFindings
                Resource: !GetAtt ECRRepository.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: ECREKSAccess
        - Key: ManagedBy
          Value: CloudFormation

  # IAM Instance Profile for EC2 instances
  ECEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${RepositoryName}-ec2-profile-${Environment}'
      Roles:
        - !Ref ECEC2Role

  # IAM Role for EC2 instances (Read-only access)
  ECEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${RepositoryName}-ec2-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECRReadOnlyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:ListTagsForResource
                  - ecr:DescribeImageScanFindings
                Resource: !GetAtt ECRRepository.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: ECREC2Access
        - Key: ManagedBy
          Value: CloudFormation

  # CloudWatch Log Group for ECR events
  ECRLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: EnableCloudWatchLogsCondition
    Properties:
      LogGroupName: !Sub '/aws/ecr/${RepositoryName}'
      RetentionInDays: !If [IsProduction, 90, 30]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: ECRLogs
        - Key: ManagedBy
          Value: CloudFormation

  # EventBridge Rule for ECR scan completion (if notifications enabled)
  ECRScanEventRule:
    Type: AWS::Events::Rule
    Condition: HasNotificationTopic
    Properties:
      Description: !Sub 'ECR image scan completion events for ${RepositoryName}'
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - ECR Image Scan
        detail:
          repository-name:
            - !Ref RepositoryName
          scan-status:
            - COMPLETE
            - FAILED
      State: ENABLED
      Targets:
        - Arn: !Ref NotificationTopicArn
          Id: ECRScanNotification

  # CloudWatch Dashboard for ECR metrics
  ECRDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'ECR-${RepositoryName}-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ECR", "RepositoryPullCount", "RepositoryName", "${RepositoryName}" ],
                  [ ".", "RepositoryPushCount", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "ECR Repository Activity",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ECR", "ImageCount", "RepositoryName", "${RepositoryName}" ],
                  [ ".", "ImageSizeBytes", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Repository Storage Metrics",
                "period": 300
              }
            }
          ]
        }

Outputs:
  RepositoryName:
    Description: Name of the ECR repository
    Value: !Ref ECRRepository
    Export:
      Name: !Sub '${AWS::StackName}-RepositoryName'

  RepositoryArn:
    Description: ARN of the ECR repository
    Value: !GetAtt ECRRepository.Arn
    Export:
      Name: !Sub '${AWS::StackName}-RepositoryArn'

  RepositoryUri:
    Description: URI of the ECR repository
    Value: !GetAtt ECRRepository.RepositoryUri
    Export:
      Name: !Sub '${AWS::StackName}-RepositoryUri'

  RegistryId:
    Description: Registry ID (AWS Account ID) of the ECR repository
    Value: !Ref 'AWS::AccountId'
    Export:
      Name: !Sub '${AWS::StackName}-RegistryId'

  CICDRoleArn:
    Description: ARN of the IAM role for CI/CD pipeline access
    Value: !GetAtt ECRCICDRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CICDRoleArn'

  EKSRoleArn:
    Description: ARN of the IAM role for EKS pods (IRSA)
    Value: !GetAtt ECREKSRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EKSRoleArn'

  EC2RoleArn:
    Description: ARN of the IAM role for EC2 instances
    Value: !GetAtt ECEC2Role.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EC2RoleArn'

  EC2InstanceProfileArn:
    Description: ARN of the IAM instance profile for EC2 instances
    Value: !GetAtt ECEC2InstanceProfile.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EC2InstanceProfileArn'

  DashboardUrl:
    Description: CloudWatch Dashboard URL for ECR metrics
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ECRDashboard}'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardUrl'