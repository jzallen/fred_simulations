# EC2 Security Rules
# CloudFormation Guard policy rules for EC2 instance security validation
#
# These rules enforce security best practices for EC2 instances in CloudFormation templates.
# Documentation: https://docs.aws.amazon.com/cfn-guard/latest/ug/writing-rules.html
# AWS EC2 Security Best Practices: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-best-practices.html
# Security Hub EC2 Controls: https://docs.aws.amazon.com/securityhub/latest/userguide/ec2-controls.html

# ============================================================================
# INSTANCE METADATA SERVICE (IMDSv2)
# ============================================================================

# Rule: EC2 instances must have IMDSv2 enabled (required)
rule ec2_must_use_imdsv2 {
    let ec2_instances = Resources.*[ Type == 'AWS::EC2::Instance' ]

    when %ec2_instances !empty {
        %ec2_instances.Properties.MetadataOptions exists

        %ec2_instances.Properties.MetadataOptions.HttpTokens == "required"
    }
}

# ============================================================================
# IAM AND PERMISSIONS
# ============================================================================

# Rule: EC2 instances should have IAM instance profile
rule ec2_should_have_instance_profile {
    let ec2_instances = Resources.*[ Type == 'AWS::EC2::Instance' ]

    when %ec2_instances !empty {
        %ec2_instances.Properties.IamInstanceProfile exists
    }
}

# Rule: IAM roles for EC2 must have trust policy for EC2 service
rule ec2_roles_must_trust_ec2_service {
    let iam_roles = Resources.*[ Type == 'AWS::IAM::Role' ]

    when %iam_roles !empty {
        %iam_roles.Properties.AssumeRolePolicyDocument exists

        when %iam_roles.Properties.AssumeRolePolicyDocument exists {
            %iam_roles.Properties.AssumeRolePolicyDocument.Version exists

            %iam_roles.Properties.AssumeRolePolicyDocument.Statement exists

            %iam_roles.Properties.AssumeRolePolicyDocument.Statement[*] {
                Effect == 'Allow'

                Action exists

                Principal exists
            }
        }
    }
}

# Rule: IAM instance profiles must reference at least one role
rule ec2_instance_profiles_must_have_roles {
    let instance_profiles = Resources.*[ Type == 'AWS::IAM::InstanceProfile' ]

    when %instance_profiles !empty {
        %instance_profiles.Properties.Roles exists

        when %instance_profiles.Properties.Roles exists {
            %instance_profiles.Properties.Roles !empty
        }
    }
}

# Rule: IAM roles should have tags
rule ec2_iam_roles_should_have_tags {
    let iam_roles = Resources.*[ Type == 'AWS::IAM::Role' ]

    when %iam_roles !empty {
        %iam_roles.Properties.Tags exists
    }
}

# ============================================================================
# NETWORK SECURITY
# ============================================================================

# Rule: EC2 instances should be in VPC (have security groups)
rule ec2_should_have_security_groups {
    let ec2_instances = Resources.*[ Type == 'AWS::EC2::Instance' ]

    when %ec2_instances !empty {
        %ec2_instances.Properties.SecurityGroupIds exists

        when %ec2_instances.Properties.SecurityGroupIds exists {
            %ec2_instances.Properties.SecurityGroupIds !empty
        }
    }
}

# Rule: EC2 instances should be in private subnet (have SubnetId)
rule ec2_should_have_subnet_id {
    let ec2_instances = Resources.*[ Type == 'AWS::EC2::Instance' ]

    when %ec2_instances !empty {
        %ec2_instances.Properties.SubnetId exists
    }
}

# Rule: Security groups must be in VPC
rule ec2_security_groups_must_be_in_vpc {
    let security_groups = Resources.*[ Type == 'AWS::EC2::SecurityGroup' ]

    when %security_groups !empty {
        %security_groups.Properties.VpcId exists
    }
}

# Rule: Security groups should have descriptive group descriptions
rule ec2_security_groups_should_have_description {
    let security_groups = Resources.*[ Type == 'AWS::EC2::SecurityGroup' ]

    when %security_groups !empty {
        %security_groups.Properties.GroupDescription exists
    }
}

# Rule: Security groups with egress rules should not be empty
rule security_groups_with_egress_should_have_rules {
    let security_groups = Resources.*[ Type == 'AWS::EC2::SecurityGroup' ]
    let sgs_with_egress = %security_groups[ Properties.SecurityGroupEgress exists ]

    when %sgs_with_egress !empty {
        %sgs_with_egress.Properties.SecurityGroupEgress !empty
    }
}

# Rule: Security groups should have tags
rule ec2_security_groups_should_have_tags {
    let security_groups = Resources.*[ Type == 'AWS::EC2::SecurityGroup' ]

    when %security_groups !empty {
        %security_groups.Properties.Tags exists
    }
}

# Rule: Security group ingress rules should have descriptions
rule ec2_security_group_ingress_should_have_description {
    let sg_ingress = Resources.*[ Type == 'AWS::EC2::SecurityGroupIngress' ]

    when %sg_ingress !empty {
        %sg_ingress.Properties.Description exists
    }
}

# Rule: Security group egress rules should have descriptions
rule ec2_security_group_egress_should_have_description {
    let sg_egress = Resources.*[ Type == 'AWS::EC2::SecurityGroupEgress' ]

    when %sg_egress !empty {
        %sg_egress.Properties.Description exists
    }
}

# ============================================================================
# GOVERNANCE AND COMPLIANCE
# ============================================================================

# Rule: EC2 instances should have tags
rule ec2_instances_must_be_tagged {
    let ec2_instances = Resources.*[ Type == 'AWS::EC2::Instance' ]

    when %ec2_instances !empty {
        %ec2_instances.Properties.Tags exists

        when %ec2_instances.Properties.Tags exists {
            some %ec2_instances.Properties.Tags[*].Key == 'Name'
        }
    }
}

# Rule: EC2 instances should specify ImageId
rule ec2_instances_must_specify_image {
    let ec2_instances = Resources.*[ Type == 'AWS::EC2::Instance' ]

    when %ec2_instances !empty {
        %ec2_instances.Properties.ImageId exists
    }
}

# Rule: EC2 instances should specify InstanceType
rule ec2_instances_must_specify_instance_type {
    let ec2_instances = Resources.*[ Type == 'AWS::EC2::Instance' ]

    when %ec2_instances !empty {
        %ec2_instances.Properties.InstanceType exists
    }
}
