# S3 Security Rules
# CloudFormation Guard policy rules for S3 bucket security validation
#
# These rules enforce security best practices for S3 buckets in CloudFormation templates.
# Documentation: https://docs.aws.amazon.com/cfn-guard/latest/ug/writing-rules.html
# AWS S3 Security Best Practices: https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html

# ============================================================================
# ENCRYPTION AND DATA PROTECTION
# ============================================================================

# Rule: S3 buckets must have encryption enabled
rule s3_encryption_enabled {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.Properties.BucketEncryption exists

        %s3_buckets.Properties.BucketEncryption.ServerSideEncryptionConfiguration[*] {
            ServerSideEncryptionByDefault.SSEAlgorithm in ['AES256', 'aws:kms']
        }
    }
}

# Rule: S3 buckets must have versioning enabled
rule s3_versioning_enabled {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.Properties.VersioningConfiguration exists

        %s3_buckets.Properties.VersioningConfiguration.Status == 'Enabled'
    }
}

# ============================================================================
# PUBLIC ACCESS CONTROLS
# ============================================================================

# Rule: S3 buckets must block all public access
rule s3_public_access_blocked {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.Properties.PublicAccessBlockConfiguration exists

        %s3_buckets.Properties.PublicAccessBlockConfiguration {
            BlockPublicAcls == true

            BlockPublicPolicy == true

            IgnorePublicAcls == true

            RestrictPublicBuckets == true
        }
    }
}

# Rule: S3 buckets should enforce bucket owner object ownership
rule s3_ownership_controls_enforced {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.Properties.OwnershipControls exists

        when %s3_buckets.Properties.OwnershipControls exists {
            %s3_buckets.Properties.OwnershipControls.Rules[*].ObjectOwnership == 'BucketOwnerEnforced'
        }
    }
}

# ============================================================================
# NETWORK SECURITY
# ============================================================================

# Rule: S3 bucket policies must enforce HTTPS-only connections
rule s3_https_only {
    let bucket_policies = Resources.*[ Type == 'AWS::S3::BucketPolicy' ]

    when %bucket_policies !empty {
        some %bucket_policies.Properties.PolicyDocument.Statement[*] {
            Effect == 'Deny'
            Condition.Bool.'aws:SecureTransport' == 'false'
        }
    }
}

# Rule: S3 bucket policies must have explicit deny statements
rule s3_bucket_policy_has_deny {
    let bucket_policies = Resources.*[ Type == 'AWS::S3::BucketPolicy' ]

    when %bucket_policies !empty {
        some %bucket_policies.Properties.PolicyDocument.Statement[*].Effect == 'Deny'
    }
}

# ============================================================================
# LIFECYCLE AND COST MANAGEMENT
# ============================================================================

# Rule: S3 buckets should have lifecycle policies configured
rule s3_lifecycle_configured {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.Properties.LifecycleConfiguration exists
    }
}

# Rule: S3 lifecycle rules must be enabled
rule s3_lifecycle_rules_enabled {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]
    let buckets_with_lifecycle = %s3_buckets[ Properties.LifecycleConfiguration exists ]

    when %buckets_with_lifecycle !empty {
        %buckets_with_lifecycle.Properties.LifecycleConfiguration.Rules[*] {
            Status == 'Enabled'
        }
    }
}

# Rule: S3 buckets should abort incomplete multipart uploads
rule s3_abort_incomplete_multipart_uploads {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]
    let buckets_with_lifecycle = %s3_buckets[ Properties.LifecycleConfiguration exists ]

    when %buckets_with_lifecycle !empty {
        some %buckets_with_lifecycle.Properties.LifecycleConfiguration.Rules[*].AbortIncompleteMultipartUpload exists
    }
}

# ============================================================================
# GOVERNANCE AND COMPLIANCE
# ============================================================================

# Rule: S3 buckets must have tags for governance
rule s3_buckets_must_be_tagged {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.Properties.Tags exists

        when %s3_buckets.Properties.Tags exists {
            some %s3_buckets.Properties.Tags[*].Key == 'Environment'
        }
    }
}

# Rule: S3 buckets should have deletion policy configured
rule s3_deletion_policy_configured {
    let s3_buckets = Resources.*[ Type == 'AWS::S3::Bucket' ]

    when %s3_buckets !empty {
        %s3_buckets.DeletionPolicy exists
    }
}

# ============================================================================
# IAM AND ACCESS MANAGEMENT
# ============================================================================

# Rule: IAM roles for S3 must have assume role policy
rule s3_roles_must_have_trust_policy {
    let iam_roles = Resources.*[ Type == 'AWS::IAM::Role' ]

    when %iam_roles !empty {
        %iam_roles.Properties.AssumeRolePolicyDocument exists

        when %iam_roles.Properties.AssumeRolePolicyDocument exists {
            %iam_roles.Properties.AssumeRolePolicyDocument.Statement[*].Effect == 'Allow'

            %iam_roles.Properties.AssumeRolePolicyDocument.Statement[*].Action exists

            %iam_roles.Properties.AssumeRolePolicyDocument.Statement[*].Principal exists
        }
    }
}

# Rule: IAM policies should enforce encrypted uploads
rule s3_policies_enforce_encryption {
    let iam_roles = Resources.*[ Type == 'AWS::IAM::Role' ]
    let roles_with_policies = %iam_roles[ Properties.Policies exists ]

    when %roles_with_policies !empty {
        %roles_with_policies.Properties.Policies[*].PolicyDocument.Statement[*] {
            when Action[*] == 's3:PutObject' or Action == 's3:PutObject' {
                Condition exists
            }
        }
    }
}

# ============================================================================
# LOGGING AND MONITORING
# ============================================================================

# Rule: CloudWatch log groups should have retention configured
rule s3_cloudwatch_log_retention_configured {
    let log_groups = Resources.*[ Type == 'AWS::Logs::LogGroup' ]

    when %log_groups !empty {
        %log_groups.Properties.RetentionInDays exists

        when %log_groups.Properties.RetentionInDays exists {
            %log_groups.Properties.RetentionInDays >= 7
        }
    }
}
